<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>纪念日</title>
    <link href="/2021/07/22/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    <url>/2021/07/22/%E7%BA%AA%E5%BF%B5%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="the-first-amp-twelfth"><a href="#the-first-amp-twelfth" class="headerlink" title="the first &amp; twelfth"></a>the first &amp; twelfth</h2><p> 见到她的第一眼，她就露出了像花儿一样的笑容，眼睛弯成一道月亮的形状<br> 我不知道她是笑什么，我只是觉得很美妙，在那一瞬间我好像接收到了生命的旨意：这个人很不一样，我应该要认真对待<br> 虽然是第一次见面，但是彼此都出乎意料的健谈，完全不像是第一次见面的陌生人，虽然谈论的话题并不深刻，但是恰恰是日常生活的交流让我感觉到我们好像在很久之前就应该认识了，这一次更像是久别重逢<br> 吃完饭我不知道该怎么继续，她说要回家去见她朋友，我俩上了地铁，到站她说要走了，我也默默挥手（锤爆自己），今天她还在说这件事😂，但其实我也实在想不起来彼时彼刻我在想什么，我只记得那天吃完饭我格外平静，就是有些简单的喜悦，现在想起还是微微扬起嘴角的那种喜悦，可能是情绪抑制了我的思考，我没能送她回家</p><p> 今天是我们的第二次见面，我计划有一些话要跟她当面说（我打算跟他摊牌了，我希望她能清楚感受到我的想法，我也抑制不了这种表达的冲动）<br> 但是话到嘴边却有些难以开口，直到最后太晚她不得不回家了，我终于大概是语无伦次的向她告白，我告诉她我喜欢她，并询问她的想法，我想象中她也会热烈的给予我肯定的回答，甚至还会给我一个大大的拥抱😁<br> 然而我并没有得到期待的回应，她告诉我我的节奏有些快了，彼此应该再多互相了解，那一刻我是紧张且失落的，虽然她表达了继续接触的意愿，但是我怎么可能只是想和她继续接触这么简单！！<br> 我脑子里只有一个念头，就是要确切的知道他是不是喜欢我，准确的说应该是是不是不喜欢我！！！。。。？？？真是要命<br> 后面她的话我都有些听不进去了，我不知道是不是错觉突然我好像又感觉到她其实也是有感觉的，只是实在有些太快了，她接受不了，毕竟到今天我们也才认识12天而已，于是我重新找回了一点自信，我需要让她感受到我的真诚，我反复告诉她我绝对不是因为想结婚了才跟她交往，我是真的喜欢她，请他一定相信我！！！<br> 结束谈话我的心情久久不能平静，我能理解她的想法也尊重她的想法，我想我现在应该做的就是继续保持全力在追求的路上奔驰，直到我们都期待的那一天，真的来临！</p>]]></content>
    
    
    
    <tags>
      
      <tag>diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>习题之一元一次方程</title>
    <link href="/2021/07/20/%E4%B9%A0%E9%A2%98%E4%B9%8B%E4%B8%80%E5%85%83%E4%B8%80%E6%AC%A1%E6%96%B9%E7%A8%8B/"/>
    <url>/2021/07/20/%E4%B9%A0%E9%A2%98%E4%B9%8B%E4%B8%80%E5%85%83%E4%B8%80%E6%AC%A1%E6%96%B9%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h2><p>实现一元一次方程的计算，例如：<br>input：3a+3=9<br>output:a=2</p><p>note:给出的一元一次方程中没有括号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @Author: Nonrustknife &lt;chris&gt;</span><br><span class="hljs-comment"> * @Date:   20-Jul-2021</span><br><span class="hljs-comment"> * @Email:  cm656879@outlook.com</span><br><span class="hljs-comment"> * @Last modified by:   chris</span><br><span class="hljs-comment"> * @Last modified time: 20-Jul-2021</span><br><span class="hljs-comment"> */</span><br><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_COEF_LEN  10</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_COEFARR_LEN 16</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INPUT_IS_SYMBOL(input)  ((input == <span class="hljs-meta-string">&#x27;-&#x27;</span>) || (input == <span class="hljs-meta-string">&#x27;+&#x27;</span>) || (input == <span class="hljs-meta-string">&#x27;=&#x27;</span>))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INPUT_IS_NUM(input)     ((input <span class="hljs-meta-string">&lt;= 9) &amp;&amp; (input &gt;</span>= 0))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TEMPTERM_IS_INITSTAT(pTermTemp)  ((pTermTemp-&gt;sym == positive) &amp;&amp; (pTermTemp-&gt;coef[pTermTemp-&gt;curCoefarrPos] == 1) &amp;&amp; (pTermTemp-&gt;curCoefarrPos == 0))</span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">symbol</span></span><br><span class="hljs-class">&#123;</span><br>  negtive = <span class="hljs-number">-1</span>,<br>  positive = <span class="hljs-number">1</span><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">term</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">symbol</span> <span class="hljs-title">sym</span>;</span><br>  <span class="hljs-keyword">int</span>    symStat;<br>  <span class="hljs-keyword">char</span>   curPos;<br>  <span class="hljs-keyword">int</span>    coefArr[MAX_COEFARR_LEN];<br>&#125; term;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UpdateCurCoef</span><span class="hljs-params">(term *term, <span class="hljs-keyword">int</span> *coef)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> temp;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> loop = <span class="hljs-number">0</span>; loop &lt; term-&gt;curPos; loop++)<br>  &#123;<br>    temp += term-&gt;coefArr[term-&gt;curPos - loop] * <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, loop);<br>  &#125;<br>  *coef += term-&gt;sym * temp;<br><br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IniTempterm</span><span class="hljs-params">(term* tempTerm)</span></span><br><span class="hljs-function"></span>&#123;<br>  tempTerm-&gt;sym = positive;<br>  tempTerm-&gt;symStat = <span class="hljs-number">1</span>;<br>  tempTerm-&gt;curPos = <span class="hljs-number">0</span>;<br>  tempTerm-&gt;coefArr[tempTerm-&gt;curPos] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> leftCoef, rightCoef;<br>  <span class="hljs-keyword">int</span> *curCoef = &amp;rightCoef;<br>  term tempTerm;<br>  IniTempterm(&amp;tempTerm);<br><br>  <span class="hljs-keyword">char</span> input;<br>  <span class="hljs-keyword">char</span> unknownNum;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;input);<br>  <span class="hljs-keyword">while</span>(input != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>  &#123;<br>    <span class="hljs-keyword">if</span>(INPUT_IS_SYMBOL(input))<br>    &#123;<br>      <span class="hljs-keyword">switch</span>(input)<br>      &#123;<br>        UpdateCurCoef(&amp;tempTerm, curCoef);<br>        curCoef = &amp;rightCoef;<br>        IniTempterm(&amp;tempTerm);<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>          tempTerm.sym = <span class="hljs-number">1</span> * tempTerm.symStat;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>          tempTerm.sym = <span class="hljs-number">-1</span> * tempTerm.symStat;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;=&#x27;</span>:<br>          tempTerm.symStat = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">default</span>:<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input err\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(INPUT_IS_NUM(input))<br>    &#123;<br>      tempTerm.coefArr[tempTerm.curPos] = input;<br>      tempTerm.curPos++;<br>    &#125;<br><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      unknownNum = input;<br>      curCoef = &amp;leftCoef;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c=%d\n&quot;</span>, unknownNum, -(rightCoef/leftCoef));<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>习题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加封面图片</title>
    <link href="/2021/06/27/%E6%B7%BB%E5%8A%A0%E5%B0%81%E9%9D%A2%E5%9B%BE%E7%89%87/"/>
    <url>/2021/06/27/%E6%B7%BB%E5%8A%A0%E5%B0%81%E9%9D%A2%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<!-- 简单示例 (id, server, type)  -->    <div id="aplayer-ZzUtkpWV" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="119441963" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><!-- 进阶示例 -->]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HELLO WORLD</title>
    <link href="/2021/06/26/hello-world/"/>
    <url>/2021/06/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你写Makefile和CMakelists.txt</title>
    <link href="/2021/06/25/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E7%BD%91%E7%BB%9C%E4%B8%96%E7%95%8C/"/>
    <url>/2021/06/25/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E7%BD%91%E7%BB%9C%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>入职后开始接触了Linux环境下的代码，而且是一个代码量10W+的巨型工程，刚面对这样打的项目时总是对其中重重的文件目录感到惊讶，这么多的文件是怎么变成最后的可执行文件的？</p><p>之前在学校或者个人学习的时候写的代码都是比较简单的，一个目录下若干个c文件，编译时直接使用gcc工具一步执行gcc main.c -o main就完事了，但是面对这种多目录多源文件的项目如果还使用这种方法的话明显生产效率是极低的。由于不同的项目在进行编译时都使用相同的编译指令，只是路径和文件名不同，所以自然想到应该可以编写脚本实现编译自动化，经过学习发现原来有一种专门的脚本语言用来解决这件事，就是今天学习的内容Makefile和CMakelists.txt。</p><h2 id="什么是Makefile"><a href="#什么是Makefile" class="headerlink" title="什么是Makefile"></a><strong>什么是Makefile</strong></h2><p>首先说下Makefile，Makefile就是包含编译指令的一个脚本，Makefile需要和make搭配使用，make是Linux平台下的一个工具，通过它可以执行Makefile中的编译指令以完成工程的编译。make和Makefile的关系可以用bash和shell脚本做类比，脚本中按照脚本的规定语法写好了一些指令，然后通过对应的执行命令将脚本中的一系列指令执行完成。</p><p>接下来我们就来看下书写Makefile脚本的语法规则吧，首先我们都知道生成一个可执行文件需要有源文件，而源文件多数也都需要依赖文件，例如头文件等，Makefile中也必须遵循这样的原则。</p><p>makefile的语法规则之一就是：(以C语言项目为例，使用GCC工具，如果是C++项目则使用G++工具)</p><p><em><strong>targetFile:sourceFile</strong></em><br><em><strong>gcc -[E][S][C][ ] sourceFile -o targetFile</strong></em></p><p><em># gcc -E 表示只进行预编译，得到的目标文件为后缀为i的预编译文件（预编译执行的操作包括头展开，宏替换以及条件编译优化）</em></p><p><em># gcc -S 表示进行预编译和汇编，得到后缀为s的汇编文件（汇编将预编译的代码转换为汇编代码）</em></p><p><em># gcc -c 表示进行预编译、汇编和编译，得到后缀为o的二进制文件（编译将汇编代码转换为二进制机器语言）</em></p><p><em># gcc不带参数表示直接进行预编译、汇编、编译和链接，得到可执行文件</em></p><p>其中第一行定义了目标文件和源文件，中间用冒号隔开，第二行先用TAB键置空位，然后给出了具体的实现指令。</p><p>该命令只有在目标文件不存在，或目标比依赖的文件更旧，才会被执行。</p><p>当我们的工程中在同一目录下出现了多个C源文件时，则需重复上面两行指令依次生成.o文件最后链接成可执行文件。那么为了减少这种重复度极高的代码的书写，makefile语法中提供了一种设置替换的方式，可以将所有的同类型文件用一个变量来表示。</p><p><em><strong>OBJ=a.o b.o c.o</strong></em></p><p><em><strong>TAR=main</strong></em></p><p>这样Makefile中所有出现a.o b.o c.o的地方就都可以用$(OBJ)来代替，所有出现main的地方都可以用$(TAR)表示，$(变量名)为变量的使用方式。</p><p>另外还可以用+=进行追加使变量可以适用于不同的场景。:=则表示恒等于，使用恒等于设置的变量就不能在进行追加了。</p><p>除此以外，还有一些固定变量，**%.c表示任意的.c文件，%.o表示任意的.o文件， <em>.c表示所有的.c文件，</em>.o表示所有的.o文件，$@表示所有的目标文件，$^表示所有的依赖文件，$&lt;表示所有依赖文件的第一个**。</p><p>通过这些变量使得我们的Makefile大大精简，同时还增强了Makefile在不同工程下的适用性。</p><p>最后在Makefile文件中还会集成一些和编译无关的操作我们希望在进行编译时或之前或之后同时进行的，例如编译之前先清除遗留的中间文件而重新生成覆盖，Makefile同样提供了一种伪目标的方式来实现。</p><p>.PHONY:clear</p><p>clear:</p><p>  rm -rf main.o main</p><p><strong>.PHONY后面的target（即冒号之前的文件）表示的也是一个伪造的target, 而不是真实存在的文件target</strong></p><p>总结一下，Makefile的编写其实就包括三步，第一步，指定目标文件和依赖文件；第二步，给出从依赖文件到目标文件的实现指令；第三步，进行变量替换；</p><p>华丽的分割线</p><hr><h2 id="CMakelists-txt又是什么东西"><a href="#CMakelists-txt又是什么东西" class="headerlink" title="CMakelists.txt又是什么东西?"></a><strong>CMakelists.txt又是什么东西?</strong></h2><p>因为不同平台下的Makefile书写规则是不一样的，Makefile只适用于类UNIX系统下的编译，如果是在Windows环境下则需要重新编写Makefile。cmake就是为了解决跨平台编译的问题，使用cmake工具，可以自动生成适应平台的Makefile。</p><p>同样的，在单目录的场景下，CMakelists.txt的语法如下</p><p>CMAKE_MINIMUM_REQUIRED(3.10)</p><p>PROJECT(main)</p><p>AUX_SOURCE_DIR(./ DIR_SRC)</p><p>ADD_EXECUTABLE(main ${DIR_SRC})</p><p>只需要三行代码，第一行指定支持的cmake最低版本；第二行给工程命名；第三行将目录下所有源文件打包成变量，第四行生成可执行文件；</p><p>如果是多目录下，比如一个库文件目录和一个源文件目录的话，则需要在每个目录下面都编写一个CMakeLists.txt，一共三个，分别是源文件目录，库文件目录和根目录</p><p>其中源文件目录src下的CMakeListx.txt内容如下</p><p><em><strong>AUX_SOURCE_DIRECTORY(./ DIR_SRC)</strong></em></p><p><em><strong>ADD_EXECUTABLE(main ${DIR_SRC})</strong></em></p><p><em><strong>TARGET_LINK_LIBRARIES(main mylib)</strong></em></p><p>库文件目录mylib下面的CMakeLists.txt内容如下</p><p><em><strong>AUX_SOURCE_DIRECTORY(./ DIR_LIB)</strong></em></p><p><em><strong>ADD_LIBRARY(mylib ${DIR_LIB})</strong></em></p><p>根目录下的CMakeLists.txt内容如下</p><p><em><strong>CMAKE_MINIMUM_REQUIRED(3.10)</strong></em></p><p><em><strong>PROJECT(main)</strong></em></p><p><em><strong>ADD_SUBDIRECTORY(./src)</strong></em></p><p><em><strong>ADD_SUBDIRECTORY(./mylib)</strong></em></p><p>这是库目录和源文件目录分离的场景，如果说只有一个源文件没必要新建一个源文件目录即不存在源文件目录的情况下，库目录下的CMakeLists.txt不变，根目录下的CMakeLists.txt内容如下</p><p><em><strong>CMAKE_MINIMUM_REQUIRED(3.10)</strong></em></p><p><em><strong>PROJECT(main)</strong></em></p><p><em><strong>ADD_SUBDIRECTORY(./mylib)</strong></em></p><p><em><strong>AUX_SOURCE_DIRECTORY(./ DIR_SRC)</strong></em></p><p><em><strong>ADD_EXECUTABLE(main ${DIR_SRC})</strong></em></p><p><em><strong>TARGET_LINK_LIBRARIES(main mylib)</strong></em></p><p>实际上就是把原来根目录和源文件目录下的CMakeLists.txt合并了</p><hr><p>以上是自己学习CMake的一点学习记录，总结下来发现也完全不难，只需要理解两个场景单目录和多目录下的编写方式就可以了，关键的语法不超过10行，CMake的知识点还有很多，具体详情可以在网上搜索。总之，CMake可以让我们不用去编写复杂的Makefile，并且跨平台，是个非常强大并值得一学的工具。</p><p>如果有写的不对的地方，希望能留言指正，谢谢阅读。</p>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
