<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>添加封面图片</title>
    <link href="/undefined/undefined/undefined/:/"/>
    <url>/undefined/undefined/undefined/:/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><video src="https://www.bilibili.com/video/BV1j4411o7dx" controls="controls" style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;"></video>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HELLO WORLD</title>
    <link href="/undefined/undefined/undefined/:/"/>
    <url>/undefined/undefined/undefined/:/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你写Makefile和CMakelists.txt</title>
    <link href="/undefined/undefined/undefined/:/"/>
    <url>/undefined/undefined/undefined/:/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>入职后开始接触了Linux环境下的代码，而且是一个代码量10W+的巨型工程，刚面对这样打的项目时总是对其中重重的文件目录感到惊讶，这么多的文件是怎么变成最后的可执行文件的？</p><p>之前在学校或者个人学习的时候写的代码都是比较简单的，一个目录下若干个c文件，编译时直接使用gcc工具一步执行gcc main.c -o main就完事了，但是面对这种多目录多源文件的项目如果还使用这种方法的话明显生产效率是极低的。由于不同的项目在进行编译时都使用相同的编译指令，只是路径和文件名不同，所以自然想到应该可以编写脚本实现编译自动化，经过学习发现原来有一种专门的脚本语言用来解决这件事，就是今天学习的内容Makefile和CMakelists.txt。</p><h2 id="什么是Makefile"><a href="#什么是Makefile" class="headerlink" title="什么是Makefile"></a><strong>什么是Makefile</strong></h2><p>首先说下Makefile，Makefile就是包含编译指令的一个脚本，Makefile需要和make搭配使用，make是Linux平台下的一个工具，通过它可以执行Makefile中的编译指令以完成工程的编译。make和Makefile的关系可以用bash和shell脚本做类比，脚本中按照脚本的规定语法写好了一些指令，然后通过对应的执行命令将脚本中的一系列指令执行完成。</p><p>接下来我们就来看下书写Makefile脚本的语法规则吧，首先我们都知道生成一个可执行文件需要有源文件，而源文件多数也都需要依赖文件，例如头文件等，Makefile中也必须遵循这样的原则。</p><p>makefile的语法规则之一就是：(以C语言项目为例，使用GCC工具，如果是C++项目则使用G++工具)</p><p><em><strong>targetFile:sourceFile</strong></em><br><em><strong>gcc -[E][S][C][ ] sourceFile -o targetFile</strong></em></p><p><em># gcc -E 表示只进行预编译，得到的目标文件为后缀为i的预编译文件（预编译执行的操作包括头展开，宏替换以及条件编译优化）</em></p><p><em># gcc -S 表示进行预编译和汇编，得到后缀为s的汇编文件（汇编将预编译的代码转换为汇编代码）</em></p><p><em># gcc -c 表示进行预编译、汇编和编译，得到后缀为o的二进制文件（编译将汇编代码转换为二进制机器语言）</em></p><p><em># gcc不带参数表示直接进行预编译、汇编、编译和链接，得到可执行文件</em></p><p>其中第一行定义了目标文件和源文件，中间用冒号隔开，第二行先用TAB键置空位，然后给出了具体的实现指令。</p><p>该命令只有在目标文件不存在，或目标比依赖的文件更旧，才会被执行。</p><p>当我们的工程中在同一目录下出现了多个C源文件时，则需重复上面两行指令依次生成.o文件最后链接成可执行文件。那么为了减少这种重复度极高的代码的书写，makefile语法中提供了一种设置替换的方式，可以将所有的同类型文件用一个变量来表示。</p><p><em><strong>OBJ=a.o b.o c.o</strong></em></p><p><em><strong>TAR=main</strong></em></p><p>这样Makefile中所有出现a.o b.o c.o的地方就都可以用$(OBJ)来代替，所有出现main的地方都可以用$(TAR)表示，$(变量名)为变量的使用方式。</p><p>另外还可以用+=进行追加使变量可以适用于不同的场景。:=则表示恒等于，使用恒等于设置的变量就不能在进行追加了。</p><p>除此以外，还有一些固定变量，**%.c表示任意的.c文件，%.o表示任意的.o文件， <em>.c表示所有的.c文件，</em>.o表示所有的.o文件，$@表示所有的目标文件，$^表示所有的依赖文件，$&lt;表示所有依赖文件的第一个**。</p><p>通过这些变量使得我们的Makefile大大精简，同时还增强了Makefile在不同工程下的适用性。</p><p>最后在Makefile文件中还会集成一些和编译无关的操作我们希望在进行编译时或之前或之后同时进行的，例如编译之前先清除遗留的中间文件而重新生成覆盖，Makefile同样提供了一种伪目标的方式来实现。</p><p>.PHONY:clear</p><p>clear:</p><p>  rm -rf main.o main</p><p><strong>.PHONY后面的target（即冒号之前的文件）表示的也是一个伪造的target, 而不是真实存在的文件target</strong></p><p>总结一下，Makefile的编写其实就包括三步，第一步，指定目标文件和依赖文件；第二步，给出从依赖文件到目标文件的实现指令；第三步，进行变量替换；</p><p>华丽的分割线</p><hr><h2 id="CMakelists-txt又是什么东西"><a href="#CMakelists-txt又是什么东西" class="headerlink" title="CMakelists.txt又是什么东西?"></a><strong>CMakelists.txt又是什么东西?</strong></h2><p>因为不同平台下的Makefile书写规则是不一样的，Makefile只适用于类UNIX系统下的编译，如果是在Windows环境下则需要重新编写Makefile。cmake就是为了解决跨平台编译的问题，使用cmake工具，可以自动生成适应平台的Makefile。</p><p>同样的，在单目录的场景下，CMakelists.txt的语法如下</p><p>CMAKE_MINIMUM_REQUIRED(3.10)</p><p>PROJECT(main)</p><p>AUX_SOURCE_DIR(./ DIR_SRC)</p><p>ADD_EXECUTABLE(main ${DIR_SRC})</p><p>只需要三行代码，第一行指定支持的cmake最低版本；第二行给工程命名；第三行将目录下所有源文件打包成变量，第四行生成可执行文件；</p><p>如果是多目录下，比如一个库文件目录和一个源文件目录的话，则需要在每个目录下面都编写一个CMakeLists.txt，一共三个，分别是源文件目录，库文件目录和根目录</p><p>其中源文件目录src下的CMakeListx.txt内容如下</p><p><em><strong>AUX_SOURCE_DIRECTORY(./ DIR_SRC)</strong></em></p><p><em><strong>ADD_EXECUTABLE(main ${DIR_SRC})</strong></em></p><p><em><strong>TARGET_LINK_LIBRARIES(main mylib)</strong></em></p><p>库文件目录mylib下面的CMakeLists.txt内容如下</p><p><em><strong>AUX_SOURCE_DIRECTORY(./ DIR_LIB)</strong></em></p><p><em><strong>ADD_LIBRARY(mylib ${DIR_LIB})</strong></em></p><p>根目录下的CMakeLists.txt内容如下</p><p><em><strong>CMAKE_MINIMUM_REQUIRED(3.10)</strong></em></p><p><em><strong>PROJECT(main)</strong></em></p><p><em><strong>ADD_SUBDIRECTORY(./src)</strong></em></p><p><em><strong>ADD_SUBDIRECTORY(./mylib)</strong></em></p><p>这是库目录和源文件目录分离的场景，如果说只有一个源文件没必要新建一个源文件目录即不存在源文件目录的情况下，库目录下的CMakeLists.txt不变，根目录下的CMakeLists.txt内容如下</p><p><em><strong>CMAKE_MINIMUM_REQUIRED(3.10)</strong></em></p><p><em><strong>PROJECT(main)</strong></em></p><p><em><strong>ADD_SUBDIRECTORY(./mylib)</strong></em></p><p><em><strong>AUX_SOURCE_DIRECTORY(./ DIR_SRC)</strong></em></p><p><em><strong>ADD_EXECUTABLE(main ${DIR_SRC})</strong></em></p><p><em><strong>TARGET_LINK_LIBRARIES(main mylib)</strong></em></p><p>实际上就是把原来根目录和源文件目录下的CMakeLists.txt合并了</p><hr><p>以上是自己学习CMake的一点学习记录，总结下来发现也完全不难，只需要理解两个场景单目录和多目录下的编写方式就可以了，关键的语法不超过10行，CMake的知识点还有很多，具体详情可以在网上搜索。总之，CMake可以让我们不用去编写复杂的Makefile，并且跨平台，是个非常强大并值得一学的工具。</p><p>如果有写的不对的地方，希望能留言指正，谢谢阅读。</p>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
